# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # install python
    - name: install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.0
    # Runs a single command using the runners shell
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r package/requirements.txt
        pip install -r package/test_requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: |
        pushd package
        python setup.py develop
        popd
        python -m unittest
  Coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    # install python
    - name: install python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.0
    - name: Install dependencies
      run: |
        pip install wheel
        pip install -U pytest pytest-cov coveralls
      #sudo gem install coveralls-lcov
      #pip install coveralls
      #pip install python-coveralls
    - name: Run coveralls
      env:
          GITHUB_TOKEN: ${{ secrets.COVERALL_TOKEN }}
      run: |
      #python -m coveralls --output=coverage.json
      #coveralls-lcov -v -n coverage.info > coverage.json
        pytest --cov=.
        coveralls